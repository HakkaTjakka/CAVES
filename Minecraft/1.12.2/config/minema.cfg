# Configuration file

##########################################################################################################
# capturing
#--------------------------------------------------------------------------------------------------------#
# Settings for video recording.
##########################################################################################################

capturing {
    # Enable to fix broken recordings when using optifine's antialiasing or fast render together with a custom resolution. Resizes the
    # whole application window as a workaround.
    B:aaFastRenderFix=true

    # If enabled, the depth buffer is captured linearly. Warning: Certain tricks are not available for this buffer so this is quite
    # slow!
    B:captureDepth=false

    # If greater than 0, the depth capturing will adjust the depth according to this maximum value rather than Minecraft's render
    # distance
    D:captureDepthDistance=0.0

    # Path were the captured videos are stored. If no absolute path is used, it's relative to the Minecraft working directory.
    S:capturePath=movies

    # Height of every captured frame in pixels. Set to 0 to use the current window/display height. Non-zero values require framebuffer
    # support and are bound to the maximum texture resolution of your GPU.
    I:frameHeight=0

    # Number of frames to capture before stopping automatically. -1 means no limit.
    I:frameLimit=-1

    # Recording frame rate, sets the amount of frames recorded per in-game second. Floating point values are allowed, e.g. 23.976 for
    # 24p NTSC. Because Minecraft operates at 20 ticks per second, frame rates with multiples of 20 are recommended for best
    # smoothness.
    D:frameRate=60.0

    # Width of every captured frame in pixels. Set to 0 to use the current window/display width. Non-zero values require framebuffer
    # support and are bound to the maximum texture resolution of your GPU.
    I:frameWidth=0

    # This option allows you to hold a render frame for recording for specific time. It's only useful with shaders that support
    # path/ray tracing (like PTGI) or temporals (TAA) whose lighting takes a couple of render frames to catch up.
    I:heldFrames=1

    # If disabled, the GUI (hotbar, hand, crosshair, etc) will not be recorded.
    B:recordGui=false

    # If enabled, show additional capturing information on the overlay (F3 menu). Note that these information are visible in the
    # video, too.
    B:showOverlay=false

    # When enabled, alpha channel will be sent to ffmpeg as well. In order to actually to appear, you need to use some mod features,
    # like Blockbuster's chroma sky feature with 0% opacity (or keying option of image or custom model morphs). This also doesn't work
    # with shaders, most of the times, as they ignore passing the alpha value (individual shader packs requires editing).
    B:useAlpha=false

    # Enable alpha in screenshots made by F2 keybind
    B:useAlphaScreenshot=false
}


##########################################################################################################
# encoding
#--------------------------------------------------------------------------------------------------------#
# Settings for video encoding.
##########################################################################################################

encoding {
    # This option enables logging of ffmpeg encoding process by writing the output of process into a *.log file. Disabling this option
    # won't create the log files upon recording.
    B:enableEncoderLogging=false

    # If necessary, snaps the recording resolution to the next lower resolution so that width and height is divisible by this modulus.
    # FFMpeg only needs mod2, some other encoders might need more.
    S:snapResolution=mod2

    # If enabled, a video encoding program is used that will receive uncompressed BGR24 frames from Minema via the standard input
    # pipe.
    B:useVideoEncoder=true

    # Arguments for the video encoding program. Placeholders: %WIDTH% - frame width, %HEIGHT% - frame height, %FPS% - frame rate.
    # %NAME% - video file name to use. Ignored if the video encoder is disabled.
	# -b:v 10M
    S:videoEncoderParams=-rtbufsize 1024M -thread_queue_size 1024 -f rawvideo -pix_fmt bgr24 -s %WIDTH%x%HEIGHT% -r 60 -i - -vf vflip -segment_time 00:01:00 -f segment -reset_timestamps 1 -c:v h264_nvenc -profile:v high -pix_fmt yuv420p -bufsize 20M -bf:v 3 -preset fast -rc:v vbr_hq -rc-lookahead 32 f:/record2/output_%NAME%_%03d.mp4

    # Arguments for the video encoding program when 'Use alpha' option is enabled. Placeholders are the same. For PNG sequences, you
    # could use "-f rawvideo -pix_fmt rgb32 -s %WIDTH%x%HEIGHT% -r %FPS% -i - -vf vflip %NAME%_%s.png".
    S:videoEncoderParamsAlpha=-f rawvideo -pix_fmt rgb32 -s %WIDTH%x%HEIGHT% -r 60 -i - -vf vflip -c:v libx264 -preset ultrafast -tune zerolatency -qp 18 -pix_fmt yuv420p %NAME%_rgb.mp4 -vf vflip,alphaextract,format=yuv420p %NAME%_alpha.mp4

    # Path to the video encoding executable. The encoder's working directory is the generated movie folder. Ignored if the video
    # encoder is disabled.
    S:videoEncoderPath=d:/pacman/ffmpeg/bin/ffmpeg.exe
}


##########################################################################################################
# engine
#--------------------------------------------------------------------------------------------------------#
# Advanced engine override settings used during recording.
##########################################################################################################

engine {
    # Speed modifier for the game clock. The default is 1.0, which equals 20 ticks per second. Lower or higher values will speed up or
    # slow down the game time. 2.5, for example, results in two and a half of the normal speed. Useful for slow motion or time lapse
    # effects. Ignored if the capturing is unsynchronized.
    D:engineSpeed=1.0

    # If Preload Chunks is enabled and this is also enabled, all chunks in render distance will be preloaded. THIS IS ONLY TRULY
    # EFFECTIVE ON LOCAL WORLDS!
    B:forcePreloadChunks=true

    # If enabled, Minema will heavily accelerate the chunk loading rate during recording. THIS IS ONLY TRULY EFFECTIVE ON LOCAL
    # WORLDS!
    B:preloadChunks=true

    # If enabled, the local server and client runs synchronously to the video capturing frame rate. This effectively turns Minecraft
    # into an offline renderer and allows rendering and capturing of extremely complex scenes. This ShaderSync version also
    # synchronizes the shader mod by karyonix (compatible with Optifine, too). ONLY WORKS ON LOCAL WORLDS!
    B:syncEngine=true
}


